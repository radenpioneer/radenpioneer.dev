---
import Layout from '~/layouts/layout.astro'
import { CollectionEntry, getCollection } from 'astro:content'
import { MazeWide } from '~/components/maze'
import { parser } from '~/components/helper/marked'

interface Page<T = any> {
  /** result */
  data: T[]
  /** metadata */
  /** the count of the first item on the page, starting from 0 */
  start: number
  /** the count of the last item on the page, starting from 0 */
  end: number
  /** total number of results */
  total: number
  /** the current page number, starting from 1 */
  currentPage: number
  /** number of items per page (default: 25) */
  size: number
  /** number of last page */
  lastPage: number
  url: {
    /** url of the current page */
    current: string
    /** url of the previous page (if there is one) */
    prev: string | undefined
    /** url of the next page (if there is one) */
    next: string | undefined
  }
}

export const getStaticPaths = async ({ paginate }: { paginate: any }) => {
  const posts = await getCollection('blog', ({ data }) => !data.draft)
  return paginate(posts, { pageSize: 12 })
}

const title = 'Blog'
const { page } = Astro.props as { page: Page<CollectionEntry<'blog'>> }
---

<Layout title={title}>
  <section class="_list container">
    <div class="_maze">
      <MazeWide />
    </div>
    <h1 class="_title">{title}</h1>
    {
      page.data.map((post) => {
        const url = `/blog/${post.data.date.getFullYear()}/${post.slug}`
        return (
          <article class="_post">
            <h3>
              <a href={url}>{post.data.title}</a>
            </h3>
            <Fragment
              set:html={parser(
                post.body.match(
                  /^(?!#|!|(?:<[^>]*>|&lt;[^&]*&gt;).*$|\s*$).*/m
                )?.[0] as string
              )}
            />
            <p class="_date">
              <time datetime={post.data.date.toISOString()}>
                <i>
                  <small>
                    {post.data.date.toLocaleDateString('id-ID', {
                      weekday: 'long',
                      day: 'numeric',
                      month: 'long',
                      year: 'numeric',
                    })}
                  </small>
                </i>
              </time>
            </p>
          </article>
        )
      })
    }
  </section>
</Layout>

<style lang="scss">
  @use '../../styles/fonts';

  ._list {
    padding-top: 8rem;
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    gap: 2rem;
    position: relative;
    overflow-x: hidden;
  }

  ._title {
    @extend %heading;
    --font-size: 2.5rem;
    line-height: 110%;

    --color: transparent;
    background-image: linear-gradient(
      to right,
      var(--primary) 5%,
      var(--secondary) 95%
    );
    background-clip: text;
  }

  ._date {
    color: var(--muted-color);
  }

  ._maze {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    z-index: -1;
    margin-left: calc(var(--spacing) * -1);
    margin-right: calc(var(--spacing) * -1);
    user-select: none;
    opacity: 10%;
    transform: translate(0, -20%);
  }

  ._post {
    h3 {
      --typography-spacing-vertical: 1rem;
      line-height: 125%;
    }

    p {
      --typography-spacing-vertical: 0.5rem;
    }
  }

  @media (min-width: 992px) {
    ._title {
      --font-size: 4rem;
      line-height: 125%;
    }

    ._maze {
      transform: translate(0, -50%);
    }
  }
</style>
