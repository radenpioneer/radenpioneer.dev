---
import Layout from '~/layouts/layout.astro'
import { type CollectionEntry, getCollection } from 'astro:content'
import { getImage } from 'astro:assets'
import typestyle from '~/styles/fonts.module.scss'

export const getStaticPaths = async () => {
  const posts = await getCollection('posts', ({ data }) =>
    import.meta.env.MODE === 'production' ? !data.draft : true
  )
  return posts.map((post) => ({
    params: {
      slug: [
        new Date(post.data.publishDate).getFullYear(),
        new Date(post.data.publishDate).getMonth() + 1,
        post.slug,
      ].join('/'),
    },
    props: { post },
  }))
}

const { post } = Astro.props as { post: CollectionEntry<'posts'> }
const { Content } = await post.render()
const image = post.data.image
  ? await getImage({ src: post.data.image, width: 800, height: 600 })
  : undefined
---

<Layout
  title={post.data.title}
  description={post.data.description || undefined}
  hide={post.data.hidden}
>
  <!-- Additional Head -->
  <Fragment slot="head">
    {image && <link href={image.src} rel="preload" as="image" />}
  </Fragment>

  <!-- Main Article -->
  <article class="prose font-serif text-justify max-w-none">
    <!-- Heading Section -->
    <hgroup class="not-prose flex flex-col gap-4 font-sans mb-16">
      <h1
        class={`${typestyle.__heading} text-2xl md:text-4xl font-black text-left`}
      >
        {post.data.title}
      </h1>
      {
        post.data.description && (
          <p class="text-xl md:text-2xl italic text-left">
            {post.data.description}
          </p>
        )
      }
      <div class="flex gap-1 text-sm">
        <time datetime={new Date(post.data.publishDate).toISOString()}>
          {
            new Date(post.data.publishDate).toLocaleDateString('id', {
              dateStyle: 'long',
            })
          }
        </time>
      </div>
    </hgroup>

    <!-- Optional Image Section -->
    {
      image && (
        <p>
          <img
            src={image.src}
            class="aspect-[4/3] object-cover"
            loading="eager"
            alt={post.data.title}
            {...image.attributes}
          />
        </p>
      )
    }

    <!-- Rendered Content -->
    <Content />
  </article>
</Layout>
